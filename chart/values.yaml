---

###################################################################################################################
# INSTRUCTIONS 
###################################################################################################################
# Comments marked with 'DEFAULT:' indicate default settings must be set in the 'values.yaml' embedded in          #
# this Helm chart. Comments marked with 'ENVIRONMENT:' indicate environmental settings will typically be provided #
# at deploy time, and will override the default values in this file. In some cases it's appropriate to have both  #
# DEFAULT and ENVIRONMENT settings, denoted with multiple comments.                                               #
###################################################################################################################

# DEFAULT: Configure the default location for application image repository, tag, and pullPolicy
# ENVIRONMENT: Versions other than 'latest' are often specified in real environments, and in some cases repository
#              and pullPolicy are also customized.
image:
  repository: mss-docker.artifactory.swg-devops.com/aura-credentials-manager
  tag: latest
  pullPolicy: Always

# ENVIRONMENT: Secrets that are used to authenticate and authorize to pull container images from private repositories
imagePullSecrets:
  - name: docker-registry-pull

# DEFAULT: Path to config file that will be generated by the 'config' section below
configFilePath: /opt/app/.env

podAnnotations: {}
# foo: bar

 
# ENVIRONMENT: Key value pairs that will be auto-generated into an appropriate file format based on the 'configFilePath'
# DEFAULT: Default key value pair configuration options may also be specified here.
config: {}
#   key_one: value_one
#   key_two: value_two

istio:
  enabled: false

# DEFAULT: Directory where multiple secret files will be mounted by OpenShift and loaded into your application with 
#          file names as keys, and file contents as values.
secretsDir: /opt/app/secrets.d

# ENVIRONMENT: Uncomment if you have secret properties loaded from an OpenShift Secret
secretName: aura-credentials-manager-secret

# DEFAULT: Configure the Service which exposes your pod internally to the cluster
service:
  type: ClusterIP
  port: 80
  # DEFAULT: Optionally set this to something other than 'http' which is the default
  portName: http
  # DEFAULT: Set this to whatever port your application web server listens on
  targetPort: 3000


# ENVIRONMENT: Configuration for the OpenShift Route that exposes your application to external systems and the internet
route:
  enabled: true
  # ENVIRONMENT: To expose to the internet, you must override this with a value like 'myapp.apps-pub.dal09-dev-ocp-01.cl.sec.ibm.com'
  #              with 'apps-pub' being the identifier that integrates with the public router. Additionally the administrator
  #              who installs this chart must also set the appropriate nodeSelector and tolerations to allow your pod to
  #              start up on an OpenShift Worker Node that has ingress access to the internet.
  # host: {optional full fqdn for custom route}
  # targetServicePortName: 80
  # wildcardPolicy: None
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    enabled: true
    # termination: edge
    # insecureEdgeTerminationPolicy: Redirect
  to: {}
    # kind: Service
    # name: 
    # weight: 100

# ENVIRONMENT: If you know you want a Kubernetes Ingress instead of an OpenShift Route, configure and enable the ingress
ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - # host: {full fqdn}
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# ENVIRONMENT: Number of pods to start in parallel
replicaCount: 1

# DEFAULT: Configure the autoscaling criteria used for your application to add or remove replicas
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
  targetMemoryUtilizationPercentage: 50

# DEFAULT: Configure how much cpu/memory your application requests, and is limited to. Intentionally set low so you are forced to set these values.
# ENVIRONMENT: Often increased for production environments as load characteristics change.
resources: 
  requests:
    cpu: .5
    memory: 128Mi
  limits:
    cpu: 1
    memory: 256Mi
  

# DEFAULT: Update based on the application requirement. Examples at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe: 
  httpGet:
      path: /readiness
      port: 3000
  initialDelaySeconds: 15
  periodSeconds: 5  

# DEFAULT: Update based on the application requirement. Examples at https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
      path: /liveness
      port: 3000
  initialDelaySeconds: 15
  periodSeconds: 5  

# DEFAULT: Typically unused, but if special access control is required may be used to generate a service account
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# DEFAULT: Configure the log level and format
log:
  level: info
  format: json

# DEFAULT: Configure the Prometheus scrape capability, including the path and port to the Prometheus metrics exposed by your application
prometheusScrape:
  enabled: true
  path: /metrics
  port: 3000

# ENVIRONMENT: Configure to send Prometheus metrics to graphite
graphite:
  enabled: false
  host: ""
  port: 2003
  prefix: ""
  image:
    pullPolicy: IfNotPresent

# ENVIRONMENT: Configure the pod security context
podSecurityContext: {}
  # fsGroup: 2000

# ENVIRONMENT: Configure the security context to elevate privileges
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# ENVIRONMENT: Configure the node selector which instructs OpenShift on which type of node to schedule pods. Often used
#              to start a pod on an internet facing node.
nodeSelector: {}
# zone: yellow

# ENVIRONMENT: Configure the toleration which instructs OpenShift that your pod is able to 'tolerate' a certain 'taint'
#              on a node. Often used to allow your pod to 'tolerate' a taint such as 'zone=yellow:NoExecute' which indicates
#              that unless a pod can tolerate the 'zone=yellow' taint, the workload will not be able to execute on it.
tolerations: []
# - zone=yellow:NoExecute

# ENVIRONMENT: Configure affinity / anti-affinity rules. Currently nodeSelector and tolerations are utilized more often.
affinity: {}
